#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

// Simulate modular exponentiation
unsigned long long mod_exp(unsigned long long base, unsigned long long exp, unsigned long long mod) {
    unsigned long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

// Function to simulate DSA signing
void dsa_sign(const char *message, unsigned long long p, unsigned long long q, unsigned long long g, 
              unsigned long long x, unsigned long long *r, unsigned long long *s) {
    unsigned long long h = 0; // Hash of the message (mocked as simple sum of ASCII values)
    for (int i = 0; i < strlen(message); i++) {
        h += message[i];
    }
    h = h % q;

    unsigned long long k = (rand() % (q - 1)) + 1; // Random k in range [1, q-1]
    *r = mod_exp(g, k, p) % q;
    unsigned long long k_inv = 0;
    for (unsigned long long i = 1; i < q; i++) { // Find modular inverse of k mod q
        if ((k * i) % q == 1) {
            k_inv = i;
            break;
        }
    }
    *s = (k_inv * (h + x * (*r))) % q;
}

// Function to simulate RSA signing
unsigned long long rsa_sign(const char *message, unsigned long long d, unsigned long long n) {
    unsigned long long h = 0; // Hash of the message (mocked as simple sum of ASCII values)
    for (int i = 0; i < strlen(message); i++) {
        h += message[i];
    }
    return mod_exp(h, d, n);
}

int main() {
    // Parameters for DSA
    unsigned long long p = 23, q = 11, g = 2, x = 5; // Mock DSA parameters
    unsigned long long r1, s1, r2, s2;

    // Parameters for RSA
    unsigned long long n = 55, d = 3; // Mock RSA parameters

    const char *message = "HELLO";

    srand(time(NULL));

    // Simulate DSA signing twice
    printf("DSA Signing:\n");
    dsa_sign(message, p, q, g, x, &r1, &s1);
    printf("Signature 1: r = %llu, s = %llu\n", r1, s1);
    dsa_sign(message, p, q, g, x, &r2, &s2);
    printf("Signature 2: r = %llu, s = %llu\n", r2, s2);

    if (r1 != r2 || s1 != s2) {
        printf("DSA produces different signatures for the same message due to randomness.\n");
    }

    // Simulate RSA signing twice
    printf("\nRSA Signing:\n");
    unsigned long long rsa_sig1 = rsa_sign(message, d, n);
    unsigned long long rsa_sig2 = rsa_sign(message, d, n);
    printf("Signature 1: %llu\n", rsa_sig1);
    printf("Signature 2: %llu\n", rsa_sig2);

    if (rsa_sig1 == rsa_sig2) {
        printf("RSA produces identical signatures for the same message with the same private key.\n");
    }

    return 0;
}
